import Foundation

extension IG.DB {
    /// Instance wrapping any error generated by the database used for caching.
    ///
    /// Most `underlyingError`s will be returned from the SQLite database.
    public struct Error: IG.Error {
        public let type: Self.Kind
        public internal(set) var message: String
        public internal(set) var suggestion: String
        public internal(set) var underlyingError: Swift.Error?
        public internal(set) var context: [(title: String, value: Any)] = []
        /// The internal SQLite code returned from an SQLite operation.
        internal private(set) var code: SQLite.Result?
        
        /// Designated initializer, filling all required error fields.
        /// - parameter type: The error type.
        /// - parameter message: A brief explanation on what happened.
        /// - parameter suggestion: A helpful suggestion on how to avoid the error.
        /// - parameter code: The `SQLite` low-level response code origin of the error.
        /// - parameter error: The underlying error that happened right before this error was created.
        internal init(_ type: Self.Kind, _ message: String, suggestion: String, code: SQLite.Result? = nil, underlying error: Swift.Error? = nil) {
            self.type = type
            self.message = message
            self.suggestion = suggestion
            self.code = code
            self.underlyingError = error
        }
    }
}

extension IG.DB.Error {
    /// The type of Database error raised.
    public enum Kind: CaseIterable {
        /// The Database instance couldn't be found.
        case sessionExpired
        /// The request parameters given are invalid.
        case invalidRequest
        /// A database request was executed, but an error was returned by low-level layers.
        case callFailed
    }
    
    /// A factory function for `.sessionExpired` API errors.
    /// - parameter message: A brief explanation on what happened.
    /// - parameter suggestion: A helpful suggestion on how to avoid the error.
    internal static func sessionExpired(message: String = Self.Message.sessionExpired, suggestion: String = Self.Suggestion.keepSession) -> Self {
        self.init(.sessionExpired, message, suggestion: suggestion)
    }
    
    /// A factory function for `.invalidRequest` database errors.
    /// - parameter message: A brief explanation on what happened.
    /// - parameter error: The underlying error that is the source of the error being initialized.
    /// - parameter suggestion: A helpful suggestion on how to avoid the error.
    internal static func invalidRequest(_ message: String, underlying error: Swift.Error? = nil, suggestion: String) -> Self {
        self.init(.invalidRequest, message, suggestion: suggestion, underlying: error)
    }
    
    /// A factory function for `.callFailed` database errors.
    /// - parameter message: A brief explanation on what happened.
    /// - parameter code: The `SQLite` low-level response code origin of the error.
    /// - parameter error: The underlying error that is the source of the error being initialized.
    /// - parameter suggestion: A helpful suggestion on how to avoid the error.
    internal static func callFailed(_ message: String, code: SQLite.Result , underlying error: Swift.Error? = nil, suggestion: String) -> Self {
        self.init(.callFailed, message, suggestion: suggestion, code: code, underlying: error)
    }
}

extension IG.DB.Error {
    /// Namespace for messages reused over the framework.
    internal struct Message {
        static var sessionExpired: String { "The \(IG.DB.self) instance was not found." }
    }
    
    /// Namespace for suggestions reused over the framework.
    internal enum Suggestion {
        static var keepSession: String { "The \(IG.DB.self) functionality is asynchronous; keep around the \(IG.DB.self) instance while a response hasn't been received." }
        static var readDocumentation: String { "Read the request documentation and be sure to follow all requirements." }
        static var bug: String { IG.API.Error.Suggestion.bug }
        static var reviewError: String { "Review the returned error and try to fix the problem." }
    }
}

extension IG.DB.Error: IG.ErrorPrintable {
    var printableDomain: String {
        return "IG.\(IG.DB.self).\(IG.DB.Error.self)"
    }
    
    var printableType: String {
        switch self.type {
        case .sessionExpired: return "Session expired"
        case .invalidRequest: return "Invalid request"
        case .callFailed:     return "Database call failed"
        }
    }
    
    func printableMultiline(level: Int) -> String {
        let levelPrefix    = Self.debugPrefix(level: level+1)
        let sublevelPrefix = Self.debugPrefix(level: level+2)
        
        var result = "\(self.printableDomain) (\(self.printableType))"
        result.append("\(levelPrefix)Error message: \(self.message)")
        result.append("\(levelPrefix)Suggestions: \(self.suggestion)")
        
        if let code = self.code {
            result.append("\(levelPrefix)SQLite code (\(code.rawValue)): \(code.description)")
        }
        
        if !self.context.isEmpty {
            result.append("\(levelPrefix)Error context: \(IG.ErrorHelper.representation(of: self.context, itemPrefix: sublevelPrefix, maxCharacters: Self.maxCharsPerLine))")
        }
        
        let errorStr = "\(levelPrefix)Underlying error: "
        if let errorRepresentation = IG.ErrorHelper.representation(of: self.underlyingError, level: level, prefixCount: errorStr.count, maxCharacters: Self.maxCharsPerLine) {
            result.append(errorStr)
            result.append(errorRepresentation)
        }
        
        return result
    }
}
